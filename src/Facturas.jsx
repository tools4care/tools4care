// src/Facturas.jsx
import { useState, useEffect } from "react";
import { supabase } from "./supabaseClient";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import { useUsuario } from "./UsuarioContext";
import { useVan } from "./hooks/VanContext";

// ------ Utilities -----------
function formatAddress(dir) {
  if (!dir) return "-";
  if (typeof dir === "string") {
    try {
      // Si ya es formato EE.UU.
      if (dir.includes(",") && dir.match(/[A-Z]{2}\s*\d{5}/)) return dir;
      // Si es string tipo JSON
      dir = JSON.parse(dir);
    } catch {
      return dir;
    }
  }
  // Unión formato US
  const partes = [
    dir.calle && dir.calle.trim() ? dir.calle.trim() : null,
    dir.ciudad && dir.ciudad.trim() ? dir.ciudad.trim() : null,
    dir.estado && dir.estado.trim() ? dir.estado.trim() : null,
    dir.zip && dir.zip.trim() ? dir.zip.trim() : null,
  ].filter(Boolean);
  return partes.length ? partes.join(", ") : "-";
}
function formatPhone(phone) {
  if (!phone) return "-";
  const num = phone.replace(/\D/g, "");
  if (num.length === 10)
    return `(${num.substr(0,3)}) ${num.substr(3,3)}-${num.substr(6)}`;
  if (num.length === 11 && num[0] === "1")
    return `(${num.substr(1,3)}) ${num.substr(4,3)}-${num.substr(7)}`;
  return phone;
}

// PDF generator con dirección US para empresa y cliente
function descargarPDFFactura(factura) {
  const doc = new jsPDF("p", "pt", "a4");
  const azul = "#0B4A6F";
  const gris = "#F4F6FB";
  const negro = "#222";
  const empresa = {
    nombre: "TOOLS4CARE",
    direccion: "108 Lafayette St, Salem, MA 01970", // Dirección completa formato US
    telefono: "(978) 594-1624",
    email: "soporte@tools4care.com"
  };
  const dirCliente = formatAddress(factura.cliente_direccion);
  const telCliente = formatPhone(factura.cliente_telefono);
  const emailCliente = factura.cliente_email || "-";

  doc.setFont("helvetica", "bold");
  doc.setFontSize(22);
  doc.setTextColor(azul);
  doc.text(empresa.nombre, 36, 48);

  doc.setFont("helvetica", "normal");
  doc.setFontSize(10);
  doc.setTextColor(negro);
  doc.text(`Address: ${empresa.direccion}`, 36, 65);
  doc.text(`Phone: ${empresa.telefono}  |  Email: ${empresa.email}`, 36, 78);

  doc.setLineWidth(1.1);
  doc.setDrawColor(azul);
  doc.line(36, 86, 560, 86);

  doc.setFont("helvetica", "bold");
  doc.setFontSize(13);
  doc.setTextColor(azul);
  doc.text("INVOICE", 36, 110);

  doc.setFont("helvetica", "normal");
  doc.setFontSize(10);
  doc.setTextColor(negro);
  doc.text(`Invoice Number: ${factura.numero_factura || factura.id?.slice(0, 8)}`, 36, 130);
  doc.text(`Date: ${factura.fecha ? new Date(factura.fecha).toLocaleDateString("en-US") : ""}`, 36, 145);
  doc.text(`Client: ${factura.cliente_nombre_c || "-"}`, 36, 160);
  doc.text(`Address: ${dirCliente}`, 36, 175); // Dirección cliente formateada US
  doc.text(`Phone: ${telCliente}`, 36, 190);
  doc.text(`Email: ${emailCliente}`, 36, 205);

  doc.setTextColor(azul);
  doc.setFont("helvetica", "bold");
  doc.text("Product/Service Details", 36, 230);

  // --- Productos vendidos
  autoTable(doc, {
    startY: 240,
    head: [["Product", "Quantity", "Unit Price", "Subtotal"]],
    body: (factura.detalle_ventas && factura.detalle_ventas.length > 0)
      ? factura.detalle_ventas.map(d => [
          d.productos?.nombre || d.producto_nombre || d.producto_id || "-",
          d.cantidad || 1,
          "$" + Number(d.precio_unitario || 0).toFixed(2),
          "$" + Number(d.subtotal || 0).toFixed(2)
        ])
      : [["-", "-", "-", "-"]],
    theme: "grid",
    headStyles: { fillColor: azul, textColor: "#fff", fontStyle: "bold" },
    styles: { fontSize: 10, lineColor: gris, textColor: "#333" },
    margin: { left: 36, right: 36 }
  });

  let totalY = doc.lastAutoTable.finalY + 25;
  doc.setFontSize(11);
  doc.setTextColor(azul);
  doc.text("Total:", 400, totalY);
  doc.setTextColor(negro);
  doc.text("$" + Number(factura.total_venta || 0).toFixed(2), 470, totalY);
  doc.setFontSize(10);
  doc.setTextColor("#444");
  doc.text(`Status: ${factura.estado_pago === "pagado" ? "Paid" : "Pending"}`, 36, totalY + 25);

  let yPie = totalY + 55;
  doc.setDrawColor(gris);
  doc.line(36, yPie, 560, yPie);
  doc.setFontSize(8);
  doc.setTextColor("#666");
  doc.text(
    `Generated by TOOLS4CARE | ${new Date().toLocaleString("en-US")}`,
    36,
    yPie + 15
  );
  doc.text(
    "Valid document for US tax purposes. Consult your accountant.",
    36,
    yPie + 30
  );
  doc.save(`Invoice_${factura.numero_factura || factura.id}.pdf`);
}

// --- MAIN COMPONENT ---
export default function Facturas() {
  const { usuario } = useUsuario();
  const { van } = useVan();

  const [facturas, setFacturas] = useState([]);
  const [loading, setLoading] = useState(false);
  const [facturaSeleccionada, setFacturaSeleccionada] = useState(null);

  // Pagination
  const [pagina, setPagina] = useState(1);
  const [porPagina, setPorPagina] = useState(20);
  const [totalVentas, setTotalVentas] = useState(0);

  // Search filter
  const [busqueda, setBusqueda] = useState("");

  useEffect(() => {
    cargarFacturas();
    // eslint-disable-next-line
  }, [pagina, porPagina]);

  async function cargarFacturas() {
    setLoading(true);
    let query = supabase
      .from("facturas_ext")
      .select("*", { count: "exact" });
    if (usuario?.rol !== "admin" && van?.id) {
      query = query.eq("van_id", van.id);
    }
    const desde = (pagina - 1) * porPagina;
    const hasta = desde + porPagina - 1;
    query = query.order("fecha", { ascending: false }).range(desde, hasta);
    const { data, error, count } = await query;
    setFacturas(data || []);
    setTotalVentas(count || 0);
    setLoading(false);
  }

  // Filtering
  const facturasFiltradas = facturas.filter(f =>
    (f.cliente_nombre_c || "").toLowerCase().includes(busqueda.toLowerCase()) ||
    (f.numero_factura || "").toLowerCase().includes(busqueda.toLowerCase())
  );

  // Load product details (with real name) only if needed
  useEffect(() => {
    if (!facturaSeleccionada) return;
    if (facturaSeleccionada.detalle_ventas) return;
    async function cargarDetalle() {
      const { data } = await supabase
        .from("detalle_ventas")
        .select("*, productos(nombre)")
        .eq("venta_id", facturaSeleccionada.id);
      setFacturaSeleccionada(f => f ? { ...f, detalle_ventas: data || [] } : f);
    }
    cargarDetalle();
  }, [facturaSeleccionada]);

  return (
    <div className="max-w-6xl mx-auto py-8">
      <h2 className="text-2xl font-bold mb-6 text-blue-900 text-center tracking-tight">Invoices (Sales)</h2>
      <input
        className="border rounded p-2 mb-4 w-full max-w-md"
        placeholder="Search by client or invoice number"
        value={busqueda}
        onChange={e => setBusqueda(e.target.value)}
      />

      {loading ? (
        <div className="text-blue-600">Loading invoices…</div>
      ) : (
        <div className="overflow-x-auto">
          <table className="min-w-full text-sm rounded shadow">
            <thead>
              <tr className="bg-blue-100">
                <th className="p-2">Number</th>
                <th className="p-2">Date</th>
                <th className="p-2">Client</th>
                <th className="p-2">Total</th>
                <th className="p-2">VAN</th>
                <th className="p-2">Status</th>
              </tr>
            </thead>
            <tbody>
              {facturasFiltradas.length === 0 && (
                <tr>
                  <td colSpan={6} className="text-center text-gray-400 py-4">
                    No results.
                  </td>
                </tr>
              )}
              {facturasFiltradas.map(f => (
                <tr
                  key={f.id}
                  className="hover:bg-blue-50 cursor-pointer"
                  onClick={() => setFacturaSeleccionada(f)}
                >
                  <td className="p-2 font-mono">{f.numero_factura || f.id?.slice(0,8)}</td>
                  <td className="p-2">{f.fecha ? new Date(f.fecha).toLocaleDateString("en-US") : ""}</td>
                  <td className="p-2">{f.cliente_nombre_c || "-"}</td>
                  <td className="p-2">${Number(f.total_venta || 0).toFixed(2)}</td>
                  <td className="p-2">{f.nombre_van || "-"}</td>
                  <td className="p-2">
                    <span className={
                      f.estado_pago === "pagado"
                        ? "inline-block px-2 py-1 rounded-full bg-green-100 text-green-700 font-semibold text-xs"
                        : "inline-block px-2 py-1 rounded-full bg-yellow-100 text-yellow-700 font-semibold text-xs"
                    }>
                      {f.estado_pago === "pagado" ? "Paid" : "Pending"}
                    </span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {/* PAGINATOR */}
      <div className="flex justify-center my-4 gap-2">
        <button
          className="px-3 py-1 bg-gray-200 rounded"
          onClick={() => setPagina(p => Math.max(1, p - 1))}
          disabled={pagina === 1}
        >Previous</button>
        <span>Page {pagina} of {Math.ceil(totalVentas / porPagina) || 1}</span>
        <button
          className="px-3 py-1 bg-gray-200 rounded"
          onClick={() => setPagina(p => p + 1)}
          disabled={pagina >= Math.ceil(totalVentas / porPagina)}
        >Next</button>
      </div>

      {/* MODAL INVOICE DETAILS */}
      {facturaSeleccionada && (
        <div className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl max-w-md w-full p-7 shadow-xl border border-blue-200">
            <h3 className="font-bold text-xl mb-4 text-blue-900 tracking-tight">Invoice Details</h3>
            <div className="text-sm text-gray-700 mb-4 space-y-2">
              <div>
                <b>Invoice Number:</b> {facturaSeleccionada.numero_factura || facturaSeleccionada.id}
              </div>
              <div><b>Date:</b> {facturaSeleccionada.fecha ? new Date(facturaSeleccionada.fecha).toLocaleDateString("en-US") : ""}</div>
              <div><b>Client:</b> {facturaSeleccionada.cliente_nombre_c || "-"}</div>
              <div><b>Address:</b> {formatAddress(facturaSeleccionada.cliente_direccion)}</div>
              <div><b>Phone:</b> {formatPhone(facturaSeleccionada.cliente_telefono)}</div>
              <div><b>Email:</b> {facturaSeleccionada.cliente_email || "-"}</div>
              <div><b>Total:</b> ${Number(facturaSeleccionada.total_venta || 0).toFixed(2)}</div>
              <div><b>VAN:</b> {facturaSeleccionada.nombre_van || "-"}</div>
              <div>
                <b>Status:</b>{" "}
                <span className={
                  facturaSeleccionada.estado_pago === "pagado"
                    ? "inline-block px-2 py-1 rounded-full bg-green-100 text-green-700 font-semibold text-xs ml-2"
                    : "inline-block px-2 py-1 rounded-full bg-yellow-100 text-yellow-700 font-semibold text-xs ml-2"
                }>
                  {facturaSeleccionada.estado_pago === "pagado" ? "Paid" : "Pending"}
                </span>
              </div>
              {/* Product details */}
              <div className="mt-3">
                <b>Products:</b>
                <ul className="list-disc ml-6 space-y-1">
                  {(facturaSeleccionada.detalle_ventas || []).map((item, idx) => (
                    <li key={idx}>
                      {(item.productos?.nombre || item.producto_nombre || item.producto_id || "-")}
                      {" x "}
                      {item.cantidad || 1}
                      {" @ $"}
                      {Number(item.precio_unitario || 0).toFixed(2)}
                    </li>
                  ))}
                  {(facturaSeleccionada.detalle_ventas || []).length === 0 && (
                    <li className="text-gray-400">No products</li>
                  )}
                </ul>
              </div>
            </div>
            <button
              className="w-full mb-2 bg-blue-700 hover:bg-blue-800 text-white font-bold py-2 px-4 rounded"
              onClick={() => descargarPDFFactura(facturaSeleccionada)}
              disabled={!facturaSeleccionada.detalle_ventas}
            >Download PDF</button>
            <button
              className="w-full bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-2 px-4 rounded"
              onClick={() => setFacturaSeleccionada(null)}
            >Close</button>
          </div>
        </div>
      )}
    </div>
  );
}
