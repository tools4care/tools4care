import { useState, useEffect } from "react";
import { supabase } from "./supabaseClient";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

// Utilidad para formatear dirección limpia
function formatAddress(dir) {
  if (!dir) return "-";
  if (typeof dir === "string") {
    try { dir = JSON.parse(dir); } catch { return dir; }
  }
  const partes = [
    dir.calle && dir.calle.trim() ? dir.calle.trim() : null,
    dir.ciudad && dir.ciudad.trim() ? dir.ciudad.trim() : null,
    dir.estado && dir.estado.trim() ? dir.estado.trim() : null,
    dir.zip && dir.zip.trim() ? dir.zip.trim() : null,
  ].filter(Boolean);
  return partes.length ? partes.join(", ") : "-";
}

// Utilidad para formato de teléfono US
function formatPhone(phone) {
  if (!phone) return "-";
  const num = phone.replace(/\D/g, "");
  if (num.length === 10)
    return `(${num.substr(0,3)}) ${num.substr(3,3)}-${num.substr(6)}`;
  if (num.length === 11 && num[0] === "1")
    return `(${num.substr(1,3)}) ${num.substr(4,3)}-${num.substr(7)}`;
  return phone;
}

// PDF profesional
function descargarPDFFactura(factura) {
  const doc = new jsPDF("p", "pt", "a4");
  const azul = "#0B4A6F";
  const gris = "#F4F6FB";
  const negro = "#222";
  const empresa = {
    nombre: "TOOLS4CARE",
    direccion: "26 Howley St, Peabody, MA",
    telefono: "(555) 123-4567",
    email: "soporte@tools4care.com"
  };
  // Datos de cliente
  const cliente = factura.cliente || {};
  const dirCliente = formatAddress(cliente.direccion || factura.direccion);
  const telCliente = formatPhone(cliente.telefono || factura.telefono);
  const emailCliente = cliente.email || factura.email || "-";
  // Encabezado empresa
  doc.setFont("helvetica", "bold");
  doc.setFontSize(22);
  doc.setTextColor(azul);
  doc.text(empresa.nombre, 36, 48);

  doc.setFont("helvetica", "normal");
  doc.setFontSize(10);
  doc.setTextColor(negro);
  doc.text(`Address: ${empresa.direccion}`, 36, 65);
  doc.text(`Phone: ${empresa.telefono}  |  Email: ${empresa.email}`, 36, 78);
  doc.setLineWidth(1.1);
  doc.setDrawColor(azul);
  doc.line(36, 86, 560, 86);

  // Info de la factura y cliente
  doc.setFont("helvetica", "bold");
  doc.setFontSize(13);
  doc.setTextColor(azul);
  doc.text("INVOICE", 36, 110);

  doc.setFont("helvetica", "normal");
  doc.setFontSize(10);
  doc.setTextColor(negro);
  doc.text(`Number: ${factura.numero_factura || factura.id?.slice(0, 8)}`, 36, 130);
  doc.text(`Date: ${new Date(factura.fecha).toLocaleDateString("en-US")}`, 36, 145);
  doc.text(`Client: ${cliente.nombre || factura.cliente_nombre || "-"}`, 36, 160);
  doc.text(`Address: ${dirCliente}`, 36, 175);
  doc.text(`Phone: ${telCliente}`, 36, 190);
  doc.text(`Email: ${emailCliente}`, 36, 205);

  doc.setTextColor(azul);
  doc.setFont("helvetica", "bold");
  doc.text("Product/Service details", 36, 230);

  // Tabla de productos
  autoTable(doc, {
    startY: 240,
    head: [["Product", "Quantity", "Unit Price", "Subtotal"]],
    body: (factura.detalle_ventas || []).map(d => [
      d.producto?.nombre || d.producto_nombre || d.producto_id || "-",
      d.cantidad || 1,
      "$" + Number(d.precio_unitario || d.precio || 0).toFixed(2),
      "$" + Number(d.subtotal || (d.cantidad * d.precio_unitario) || 0).toFixed(2)
    ]),
    theme: "grid",
    headStyles: { fillColor: azul, textColor: "#fff", fontStyle: "bold" },
    styles: { fontSize: 10, lineColor: gris, textColor: "#333" },
    margin: { left: 36, right: 36 }
  });

  // Totales
  let totalY = doc.lastAutoTable.finalY + 25;
  doc.setFontSize(11);
  doc.setTextColor(azul);
  doc.text("Total:", 400, totalY);
  doc.setTextColor(negro);
  doc.text("$" + Number(factura.total_venta || 0).toFixed(2), 470, totalY);

  // Estado de pago
  doc.setFontSize(10);
  doc.setTextColor("#444");
  doc.text(`Status: ${factura.estado_pago || "pending"}`, 36, totalY + 25);

  // Pie de página
  let yPie = totalY + 55;
  doc.setDrawColor(gris);
  doc.line(36, yPie, 560, yPie);
  doc.setFontSize(8);
  doc.setTextColor("#666");
  doc.text(
    `Generated by TOOLS4CARE | ${new Date().toLocaleString("en-US")}`,
    36,
    yPie + 15
  );
  doc.text(
    "Valid document for US tax purposes. Consult your accountant.",
    36,
    yPie + 30
  );
  doc.save(`Invoice_${factura.numero_factura || factura.id}.pdf`);
}

export default function Facturas() {
  const [facturas, setFacturas] = useState([]);
  const [filtros, setFiltros] = useState({
    cliente: "",
    numeroFactura: "",
    fechaInicio: "",
    fechaFin: "",
    estado: "",
  });
  const [loading, setLoading] = useState(false);
  const [facturaSeleccionada, setFacturaSeleccionada] = useState(null);

  // Paginación
  const [pagina, setPagina] = useState(1);
  const [porPagina, setPorPagina] = useState(20);
  const [totalVentas, setTotalVentas] = useState(0);

  // Cargar ventas paginadas
  useEffect(() => {
    cargarFacturas();
    // eslint-disable-next-line
  }, [pagina, porPagina]);

  async function cargarFacturas() {
    setLoading(true);

    let query = supabase
      .from('ventas')
      .select(
        '*, cliente:clientes(*), detalle_ventas:detalle_ventas_venta_id_fkey(*, producto:producto_id(nombre))',
        { count: "exact" }
      );

    // Filtros
    if (filtros.cliente) {
      query = query.ilike('cliente_nombre', `%${filtros.cliente}%`);
    }
    if (filtros.numeroFactura) {
      query = query.ilike('numero_factura', `%${filtros.numeroFactura}%`);
    }
    if (filtros.fechaInicio) {
      query = query.gte('fecha', filtros.fechaInicio);
    }
    if (filtros.fechaFin) {
      query = query.lte('fecha', filtros.fechaFin);
    }
    if (filtros.estado) {
      query = query.eq('estado_pago', filtros.estado);
    }

    // Paginación
    const desde = (pagina - 1) * porPagina;
    const hasta = desde + porPagina - 1;
    query = query.order('fecha', { ascending: false }).range(desde, hasta);

    const { data, error, count } = await query;
    setFacturas(data || []);
    setTotalVentas(count || 0);
    setLoading(false);
  }

  function handleInput(e) {
    setFiltros(f => ({ ...f, [e.target.name]: e.target.value }));
  }

  function handleFiltrar() {
    setPagina(1); // Reinicia a la primera página al filtrar
    cargarFacturas();
  }

  return (
    <div className="max-w-6xl mx-auto py-8">
      <h2 className="text-2xl font-bold mb-6 text-blue-900 text-center">Facturas (Ventas)</h2>
      <div className="flex gap-2 mb-4 flex-wrap">
        <input name="cliente" value={filtros.cliente} onChange={handleInput} className="border p-2 rounded" placeholder="Client" />
        <input name="numeroFactura" value={filtros.numeroFactura} onChange={handleInput} className="border p-2 rounded" placeholder="Invoice Number" />
        <input name="fechaInicio" type="date" value={filtros.fechaInicio} onChange={handleInput} className="border p-2 rounded" />
        <input name="fechaFin" type="date" value={filtros.fechaFin} onChange={handleInput} className="border p-2 rounded" />
        <select name="estado" value={filtros.estado} onChange={handleInput} className="border p-2 rounded">
          <option value="">All statuses</option>
          <option value="pagado">Paid</option>
          <option value="pendiente">Pending</option>
          <option value="anulada">Voided</option>
        </select>
        <button className="bg-blue-700 text-white px-4 py-2 rounded font-bold" onClick={handleFiltrar} type="button">Filter</button>
        <select value={porPagina} onChange={e => { setPorPagina(Number(e.target.value)); setPagina(1); }} className="border p-2 rounded">
          {[10, 20, 50, 100].map(n => <option key={n} value={n}>{n} per page</option>)}
        </select>
      </div>

      {loading ? (
        <div className="text-blue-600">Loading invoices…</div>
      ) : (
        <div className="overflow-x-auto">
          <table className="min-w-full text-sm rounded shadow">
            <thead>
              <tr className="bg-blue-100">
                <th className="p-2">Number</th>
                <th className="p-2">Date</th>
                <th className="p-2">Client</th>
                <th className="p-2">Total</th>
                <th className="p-2">Products</th>
                <th className="p-2">Status</th>
              </tr>
            </thead>
            <tbody>
              {facturas.length === 0 && (
                <tr>
                  <td colSpan={6} className="text-center text-gray-400 py-4">
                    No results.
                  </td>
                </tr>
              )}
              {facturas.map(f => (
                <tr
                  key={f.id}
                  className="hover:bg-blue-50 cursor-pointer"
                  onClick={() => setFacturaSeleccionada(f)}
                >
                  <td className="p-2 font-mono">{f.numero_factura || f.id?.slice(0,8)}</td>
                  <td className="p-2">{f.fecha ? new Date(f.fecha).toLocaleDateString("en-US") : ""}</td>
                  <td className="p-2">{f.cliente?.nombre || f.cliente_nombre || f.cliente_id || "-"}</td>
                  <td className="p-2">${Number(f.total_venta || 0).toFixed(2)}</td>
                  <td className="p-2">
                    {(f.detalle_ventas || []).map(d =>
                      <div key={d.id}>
                        {d.producto?.nombre || d.producto_nombre || d.producto_id} x {d.cantidad} = ${(d.subtotal || (d.cantidad * d.precio_unitario) || 0).toFixed(2)}
                      </div>
                    )}
                  </td>
                  <td className="p-2">
                    <span className={
                      f.estado_pago === "pagado"
                        ? "bg-green-100 text-green-700 px-2 py-1 rounded"
                        : f.estado_pago === "pendiente"
                        ? "bg-yellow-100 text-yellow-700 px-2 py-1 rounded"
                        : "bg-gray-100 text-gray-700 px-2 py-1 rounded"
                    }>
                      {f.estado_pago}
                    </span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {/* PAGINADOR */}
      <div className="flex justify-center my-4 gap-2">
        <button
          className="px-3 py-1 bg-gray-200 rounded"
          onClick={() => setPagina(p => Math.max(1, p - 1))}
          disabled={pagina === 1}
        >Previous</button>
        <span>Página {pagina} de {Math.ceil(totalVentas / porPagina) || 1}</span>
        <button
          className="px-3 py-1 bg-gray-200 rounded"
          onClick={() => setPagina(p => p + 1)}
          disabled={pagina >= Math.ceil(totalVentas / porPagina)}
        >Next</button>
      </div>

      {/* MODAL DETALLE FACTURA */}
      {facturaSeleccionada && (
        <div className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl max-w-md w-full p-6 shadow-xl">
            <h3 className="font-bold text-lg mb-2">Invoice details</h3>
            <div className="text-xs text-gray-700 mb-2">
              <div><b>ID:</b> {facturaSeleccionada.id}</div>
              <div><b>Date:</b> {facturaSeleccionada.fecha ? new Date(facturaSeleccionada.fecha).toLocaleDateString("en-US") : ""}</div>
              <div><b>Client:</b> {facturaSeleccionada.cliente?.nombre || facturaSeleccionada.cliente_nombre || "-"}</div>
              <div><b>Address:</b> {formatAddress(facturaSeleccionada.cliente?.direccion || facturaSeleccionada.direccion)}</div>
              <div><b>Phone:</b> {formatPhone(facturaSeleccionada.cliente?.telefono || facturaSeleccionada.telefono)}</div>
              <div><b>Email:</b> {facturaSeleccionada.cliente?.email || facturaSeleccionada.email || "-"}</div>
              <div><b>Total:</b> ${Number(facturaSeleccionada.total_venta || 0).toFixed(2)}</div>
              <div><b>Status:</b> <span className={facturaSeleccionada.estado_pago === "pagado" ? "text-green-600" : "text-yellow-600"}>{facturaSeleccionada.estado_pago}</span></div>
            </div>
            <div className="font-semibold mt-2 mb-1">Sold products:</div>
            <div className="text-xs text-gray-700 mb-3">
              {(facturaSeleccionada.detalle_ventas || []).map(d => (
                <div key={d.id}>
                  <b>{d.producto?.nombre || d.producto_nombre || d.producto_id}</b> x {d.cantidad} = ${(d.subtotal || (d.cantidad * d.precio_unitario) || 0).toFixed(2)}
                </div>
              ))}
            </div>
            <button
              className="w-full mb-2 bg-blue-700 hover:bg-blue-800 text-white font-bold py-2 px-4 rounded"
              onClick={() => descargarPDFFactura(facturaSeleccionada)}
            >Download PDF</button>
            <button
              className="w-full bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-2 px-4 rounded"
              onClick={() => setFacturaSeleccionada(null)}
            >Close</button>
          </div>
        </div>
      )}
    </div>
  );
}
